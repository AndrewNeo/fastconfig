import copy
from generator import Generator

class ApacheGenerator(Generator):

    def generate_templates(self, jinja):
        structure = self.map_structure()
        template_map = {
            "http": jinja.get_template("apache_http.conf"),
            "https": jinja.get_template("apache_https.conf")
        }

        for domain, contents in structure.iteritems():
            f = open(self.output_dir + "/" + domain + ".conf", "w")
            f.write("# Autogenerated by fastconfig\n")
            f.write("# Configuration for " + domain)

            for site in contents:
                f.write("\n" + template_map[site["function"]].render(site))

            f.close()


    def map_structure(self):
        output = {}

        for domain, dval in self.structure["sites"].iteritems():
            output[domain] = [];

            for val in dval["subdomains"]:
                subdomain = val["name"]
                site = {"webmaster": dval["webmaster"], "domain_aliases": [], "aliases": [], "redirects": []}
                if not val: val = {}

                # Get DocumentRoot
                if not "null_path" in val:
                    directory = dval["root"] + subdomain + "/"
                    if "path" in val:
                        if val["path"].startswith("/"): # Absolute
                            directory = val["path"]
                        else: # Relative
                            directory = directory + val["path"]

                    site["directory"] = directory
                else:
                    site["directory"] = self.structure["config"]["null_path"]

                if "no_path" in val:
                    del site["directory"]

                # Determine top-level vs subdomain
                full_domain = subdomain + "." + domain
                if "is_root" in val:
                    # Handle actual root and it's subdomain
                    site["domain"] = domain
                    site["domain_aliases"].append(full_domain)
                else:
                    site["domain"] = full_domain

                site["domain_rpn"] = '.'.join(reversed(full_domain.split('.')))

                # Aliases
                if "alt_names" in val:
                    site["domain_aliases"] = val["alt_names"]

                # Let's Encrypt
                site["letsencrypt_domain"] = "letsencrypt" in dval or "letsencrypt" in val

                # Remove subdomain
                site["remove_subdomain"] = "remove_subdomain" in val

                # Handle redirect parameter
                is_https_redirect = False
                if "http" in val and "redirect" in val["http"]:
                    if "https" in val["http"]:
                        is_https_redirect = True
                    else:
                        site["redirects"].append({"target": val["http"]["redirect"]})

                # Do stuff that only applies when not an HTTPS redirect
                non_redirect_only = {"aliases":[]}

                # Aliases
                if "aliases" in val:
                    non_redirect_only["aliases"] = val["aliases"]

                # Redirects
                if "redirects" in val:
                    non_redirect_only["redirects"] = val["redirects"]

                # Auth
                if "auth" in val:
                    non_redirect_only["restrict"] = val["auth"]

                # FCGI
                if "fcgi" in val:
                    fcgi_type, fcgi_port, fcgi_socket = val["fcgi"].split(" ")
                    non_redirect_only["fcgi_config"] = {"type": fcgi_type, "port": fcgi_port}

                # WSGI
                if "wsgi" in val:
                    non_redirect_only["wsgi_config"] = val["wsgi"]

                # Proxy
                if "proxy" in val and "sites" in val["proxy"]:
                    non_redirect_only["proxy"] = val["proxy"]

                # Extra
                if "extra_apache" in val:
                    non_redirect_only["extra_apache"] = val["extra_apache"]

                # Handle HTTP site
                if not "http" in val or not "none" in val["http"]:
                    http_site = copy.deepcopy(site)
                    http_site["function"] = "http"

                    # Handle redirect only here
                    if is_https_redirect:
                        http_site["redirects"].append({"target": "https://" + http_site["domain"] + "/"});
                        http_site["directory"] = self.structure["config"]["null_path"]
                    else:
                        http_site.update(non_redirect_only)

                    output[domain].append(http_site)

                # Handle HTTPS site (LE only for now)
                if "https" in val:
                    https_site = copy.deepcopy(site)
                    https_site["function"] = "https"
                    https_site.update(non_redirect_only)

                    output[domain].append(https_site)


            if "redir_domains" in dval and "domains" in dval["redir_domains"]:
                for rd in dval["redir_domains"]["domains"]:
                    site = {"function": "http", "domain": rd, "redirects": [{"target": dval["redir_domains"]["target"]}]}
                    output[domain].append(site)


        return output
